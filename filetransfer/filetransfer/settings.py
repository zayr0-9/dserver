"""
Django settings for filetransfer project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import json
import socket

setup_file = Path(__file__).resolve().parent.parent.parent / "setup.json"

# Load drive_letter from setup.json
with open(setup_file, 'r') as f:
    config = json.load(f)
    # Default to "C" if not specified
    drive_letter = config.get("drive_letter", "C")

# Set BASE_DIR using drive_letter, used in views
BASE_DIR = Path(f"{drive_letter}:/")

# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e5d&2n#p01eerc^&35$@7@6d51lw2(a2#-y0@m^5p72k*954q('
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
PROJECT_ROOT = os.path.dirname(os.path.dirname(
    os.path.dirname(os.path.abspath(__file__))))

STATICFILES_DIRS = [
    # React build static directory
    os.path.join(PROJECT_ROOT, 'frontend', 'build', 'static'),
]


# Get the project root (one level above BASE_DIR)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

def get_local_ip():
    try:
        # Create a dummy socket and connect to a non-routable address
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            # Use a non-routable address to identify the active interface
            s.connect(("192.168.0.1", 1))  # Common LAN address, no actual connection needed
            ip_address = s.getsockname()[0]
        return ip_address
    except Exception as e:
        print(f"Error getting local IP: {e}")
        return "127.0.0.1"  # Fallback to localhost

# Example usage
local_ip = get_local_ip()

ALLOWED_HOSTS = ['localhost',
                 '127.0.0.1',
                 local_ip,
                 ]  # Add this line


# Application definition
# Increase the number of allowed file uploads
# Set this to a higher number as per your needs
DATA_UPLOAD_MAX_NUMBER_FILES = 1000

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'transfer',
    'corsheaders',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',

]
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = [
    'http://localhost:3000',
    'http://192.168.0.82',
    # Add other allowed origins
]
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:3000',
    'http://192.168.0.82',
    # Add other trusted origins
]

CSRF_COOKIE_NAME = "csrftoken"
CSRF_COOKIE_HTTPONLY = False  # Allows JavaScript to access the CSRF token
# Allow all origins or specify allowed origins
CORS_ALLOW_ALL_ORIGINS = True  # You can set it to True temporarily
ROOT_URLCONF = 'filetransfer.urls'
FILE_UPLOAD_MAX_MEMORY_SIZE = 10485760000    # 100 MB
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://192.168.0.82",
    # Add other allowed origins
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'transfer/templates'),
                 os.path.join(PROJECT_ROOT, 'frontend', 'build'),],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'filetransfer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_USER_MODEL = 'auth.User'  # Or remove this line if it's not necessary
# Logging Configuration
# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep existing loggers
    'formatters': {
        'verbose': {
            'format': '[{asctime}] {levelname} {name} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'level': 'DEBUG',  # Capture DEBUG level logs
        },
        'file': {
            'level': 'DEBUG',  # Capture DEBUG level logs
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',  # Adjust as needed
            'propagate': True,
        },
        # Ensure your app's logger captures DEBUG logs
        'transfer': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/django_static/'
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'filetransfer', 'staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
